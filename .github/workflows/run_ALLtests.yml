name: Build and functionality tests

# 1) Caches LAMMPS's release repository
# 2) Builds LAMMPS (if changes are detected in the release branch)
# 3) Builds PAPRECA on top of LAMMPS
# 4) Builds PAPRECA source tests
# After completing steps 1-3, we can be certain that the PAPRECA version can be built without any issues
# 5) Performs source tests on the C++ code
# 6) Performs event tests (check the output to ensure that they succeed 100% for any given random seed)
# 7) Performs 20 hybrid kMC/MD steps on the "Phosphate Growth from TCP on Fe110" example.


on:
  workflow_dispatch: #Only trigger manually

jobs:

  buildLAMMPS:
    runs-on: ubuntu-latest

    steps:
    
    - name: Clone LAMMPS repository (release branch)
      run: |
        git clone -b release https://github.com/lammps/lammps.git mylammps
        cd mylammps
        git checkout release
        git pull

    - name: Get LAMMPS release commit SHA
      id: get-lammps-commit
      run: |
        cd mylammps
        LAMMPS_COMMIT=$(git rev-parse HEAD)
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Create cached directory to save liblammps.a and lmp
      run: |
        mkdir -p cached
        cd ./cached
        mkdir -p lammps
        
    - name: Cache LAMMPS library
      id: cache-lammps-repo
      uses: actions/cache@v4.0.2
      with:
        path: cached/lammps
        #Key generated from os, and commit HASH. if any of these changes the key will be invalid and a rebuild will be triggered
        key: ${{ runner.os }}-lammps-repo-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-

    - name: Install LAMMPS dependencies
      if: steps.cache-lammps-repo.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich
        
    - name: Configure and build LAMMPS
      if: steps.cache-lammps-repo.outputs.cache-hit != 'true'
      run: |
        cd mylammps
        mkdir build; cd build
        cmake -DPKG_MOLECULE=on -DPKG_RIGID=on -D PKG_QEQ=on -DBUILD_LIB=on -DBUILD_SHARED_LIBS=off -DBUILD_STATIC_LIBS=on ../cmake #Configure LAMMPS, build all required packages to run tests and enable static library building
        cmake --build .

    - name: Verify LAMMPS
      if: steps.cache-lammps-repo.outputs.cache-hit != 'true'
      run: ./mylammps/build/lmp -h

    - name: Move lmp executable and lammps library to cached directory
      if: steps.cache-lammps-repo.outputs.cache-hit != 'true'
      run: |
        mv mylammps/build/lmp cached/lammps
        mv mylammps/build/liblammps.a cached/lammps

  buildPAPRECA: 

    needs: buildLAMMPS
    
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v4 #Checkout PAPRECA repository

    - name: Clone LAMMPS repository (release branch)
      run: |
        git clone -b release https://github.com/lammps/lammps.git mylammps
        cd mylammps
        git checkout release
        git pull
        
    - name: Restore LAMMPS cache
      id: cache-lammps
      uses: actions/cache@v4.0.2
      with:
        path: cached/lammps
        key: ${{ runner.os }}-lammps-repo-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich

    - name: Build PAPRECA
      run: |
        mkdir mypapreca; cd ./mypapreca
        mkdir build; cd build
        cmake $GITHUB_WORKSPACE/Installation/CMake -DLAMMPS_SRC_DIR=$GITHUB_WORKSPACE/mylammps/src/ -DLAMMPS_LIB_DIR=$GITHUB_WORKSPACE/cached/lammps/
        cmake --build .

    - name: Build TESTS executable for PAPRECA
      run: |
        cd $GITHUB_WORKSPACE/tests/source\ tests/
        mkdir build; cd build
        cmake .. -DLAMMPS_SRC_DIR=$GITHUB_WORKSPACE/mylammps/src/ -DLAMMPS_LIB_DIR=$GITHUB_WORKSPACE/cached/lammps/ -DPAPRECA_SRC_DIR=$GITHUB_WORKSPACE/source
        cmake --build .
        
    - name: Move papreca executables to artifacts folder
      run: |
        mkdir -p artifacts
        mv mypapreca/build/papreca artifacts
        mv $GITHUB_WORKSPACE/tests/source\ tests/build/source_tests artifacts

    - name: Upload papreca executables as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: papreca-artifacts
        path: artifacts

  sourceTests:
  
    needs: buildPAPRECA
    
    runs-on: ubuntu-latest

    steps:

    - name: Checkout #Checkout PAPRECA repository
      uses: actions/checkout@v4 

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich
        
    - name: Restore papreca executables
      uses: actions/download-artifact@v4
      with:
        name: papreca-artifacts
        path: artifacts
        merge-multiple: false

    - name: Run source tests
      run: |
        cd $GITHUB_WORKSPACE/tests/source\ tests/
        bash run_tests.sh $GITHUB_WORKSPACE/artifacts/

  hybridTest:
  
    needs: buildPAPRECA
    
    runs-on: ubuntu-latest

    steps:

    - name: Checkout #Checkout PAPRECA repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich
        
    - name: Restore papreca executables
      uses: actions/download-artifact@v4
      with:
        name: papreca-artifacts
        path: artifacts
        merge-multiple: false

    - name: Run hybrid test
      run: |
        cd $GITHUB_WORKSPACE/tests/hybrid\ kMC\ MD/
        bash ./test_hybrid.sh $GITHUB_WORKSPACE/artifacts/
