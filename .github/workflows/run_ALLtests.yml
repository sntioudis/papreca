name: Build and functionality tests

# 1) Caches LAMMPS's release repository
# 2) Builds LAMMPS (if changes are detected in the release branch)
# 3) Builds PAPRECA on top of LAMMPS
# 4) Builds PAPRECA source tests
# After completing steps 1-3, we can be certain that the PAPRECA version can be built without any issues
# 5) Performs source tests on the C++ code
# 6) Performs event tests (check the output to ensure that they succeed 100% for any given random seed)
# 7) Performs 20 hybrid kMC/MD steps on the "Phosphate Growth from TCP on Fe110" example.


on:
  workflow_dispatch: #Only trigger manually

jobs:

  buildLAMMPS:
    runs-on: ubuntu-latest

    steps:
    
    - name: Clone LAMMPS repository (release branch)
      run: |
        git clone -b release https://github.com/lammps/lammps.git lammpscache
        cd lammpscache
        git checkout release
        git pull

    - name: Get LAMMPS release commit SHA
      id: get-lammps-commit
      run: |
        cd lammpscache
        LAMMPS_COMMIT=$(git rev-parse HEAD)
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Install LAMMPS dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich
        
    - name: Cache LAMMPS library
      id: cache-lammps-repo
      uses: actions/cache@v4.0.2
      with:
        path: lammpscache/build/liblammps.a
        #Key generated from os, and commit HASH. if any of these changes the key will be invalid and a rebuild will be triggered
        key: ${{ runner.os }}-lammps-repo-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-

    - name: Configure and build LAMMPS
      if: steps.cache-lammps-repo.outputs.cache-hit != 'true'
      run: |
        cd lammpscache
        mkdir build; cd build
        cmake -DPKG_MOLECULE=on -DPKG_RIGID=on -D PKG_QEQ=on -DBUILD_LIB=on -DBUILD_SHARED_LIBS=off -DBUILD_STATIC_LIBS=on ../cmake #Configure LAMMPS, build all required packages to run tests and enable static library building
        cmake --build .

    - name: Verify LAMMPS executable
      run: |
        cd lammpscache/build
        ./lmp -h

  #Build PAPRECA and PAPRECA test executables on top of LAMMPS.
  #Upload artefacts of both to be used in subsequent tests
  buildPAPRECA: 

    needs: buildLAMMPS
    
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v4 #Checkout PAPRECA repository

    - name: Clone LAMMPS repository (release branch)
      run: |
        git clone -b release https://github.com/lammps/lammps.git mylammps
        cd mylammps
        git checkout release
        git pull
        
    - name: Restore LAMMPS cache
      id: cache-lammps
      uses: actions/cache@v4.0.2
      with:
        path: lammpscache/build/liblammps.a
        key: ${{ runner.os }}-lammps-repo-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-
          
    - name: Install dependencies
      run: |
        cd lammpscache/build/
        ls
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich

    - name: Build PAPRECA
      run: |
        mkdir mypapreca; cd ./mypapreca
        mkdir build; cd build
        cmake $GITHUB_WORKSPACE/Installation/CMake -DLAMMPS_SRC_DIR=mylammps/src/ -DLAMMPS_LIB_DIR=lammpscache/build/
        cmake --build .

    - name: Upload PAPRECA build artifact
      uses: actions/upload-artifact@v4
      with:
        name: PAPRECA-artifact
        path: mypapreca/build

    - name: Build TESTS executable for PAPRECA
      run: |
        cp -r $GITHUB_WORKSPACE/tests/ ./
        cd ./tests/source\ tests/
        mkdir build; cd build
        cmake .. -DLAMMPS_SRC_DIR=mylammps/src/ -DLAMMPS_LIB_DIR=lammpscache/build/ -DPAPRECA_SRC_DIR=$GITHUB_WORKSPACE/source
        cmake --build .

    - name: Upload artifact of PAPRECA test executable
      uses: actions/upload-artifact@v4
      with:
        name: PAPRECAtest-artifact
        path: tests/source\ tests/build
