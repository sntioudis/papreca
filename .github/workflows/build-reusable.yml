#Template (reusable) workflow that receives a LAMMPS version tag or a LAMMPS branch name.
#Then, the workflow builds LAMMPS. Finally, the workflow builds PAPRECA and the source_tests.
#This reusable workflow is utilized for the scheduled build and functionality tests.
#The workflow can also be used to test for backwards compatibility with different LAMMPS versions.

name: Build and test reusable

on:
  workflow_call:
    inputs:
      clone_type:
        description: 'Set this to either "branch" or "tag" to clone LAMMPS using a branch or a tag name, respectively'
        required: true
        type: string
      clone_name:
        description: 'This is the name of either the branch or the tag name'
        required: true
        type: string

jobs:

  buildLAMMPS:
    runs-on: ubuntu-latest
      
    steps:

    - name: Clone a specific LAMMPS branch
      if: ${{ inputs.clone_type == 'branch' }}
      run: |
        git clone -b ${{ inputs.clone_name }} https://github.com/lammps/lammps.git mylammps
        cd mylammps
        git checkout ${{ inputs.clone_name }}
        git pull

    - name: Clone a specific LAMMPS tag
      if: ${{ inputs.clone_type == 'tag' }}
      run: |
        git clone --depth 1 --branch ${{ inputs.clone_name }} https://github.com/lammps/lammps.git mylammps

    - name: Get LAMMPS release commit SHA
      if: ${{ inputs.cache_lammps }}
      id: get-lammps-commit
      run: |
        cd mylammps
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
      
    - name: Create lammps_artifacts directory to save liblammps.so and lmp
      run: |
        mkdir -p lammps_artifacts_${{ inputs.clone_name }}
       
    - name: Cache LAMMPS library
      id: cache-lammps-repo
      uses: actions/cache@v4.0.2
      with:
        path: lammps_artifacts_${{ inputs.clone_name }}
        #Key generated from os, and commit HASH. if any of these changes the key will be invalid and a rebuild will be triggered
        key: ${{ runner.os }}-lammps-repo-key-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-restorekey-${{ env.COMMIT_HASH }}

    - name: Install LAMMPS dependencies
      if: ${{ ( inputs.cache_lammps && steps.cache-lammps-repo.outputs.cache-hit != 'true' ) || !inputs.cache_lammps }}
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich
        
    - name: Configure and build LAMMPS
      if: ${{ ( inputs.cache_lammps && steps.cache-lammps-repo.outputs.cache-hit != 'true' ) || !inputs.cache_lammps }}
      run: |
        cd mylammps
        mkdir build; cd build
        cmake -DPKG_KOKKOS=on -DPKG_KSPACE=on -DPKG_MOLECULE=on -DPKG_RIGID=on -DPKG_QEQ=on -DBUILD_LIB=on -DBUILD_SHARED_LIBS=on ../cmake #Configure LAMMPS, build all required packages to run tests and enable static library building
        cmake --build .

    - name: Verify LAMMPS
      if: ${{ ( inputs.cache_lammps && steps.cache-lammps-repo.outputs.cache-hit != 'true' ) || !inputs.cache_lammps }}
      run: ./mylammps/build/lmp -h

    - name: Move lmp executable and lammps library to lammps_artifacts directory
      if: ${{ ( inputs.cache_lammps && steps.cache-lammps-repo.outputs.cache-hit != 'true' ) || !inputs.cache_lammps }}
      run: |
        mv mylammps/build/lmp lammps_artifacts_${{ inputs.clone_name }}
        mv mylammps/build/liblammps.so lammps_artifacts_${{ inputs.clone_name }}
        mv mylammps/build/liblammps.so.0 lammps_artifacts_${{ inputs.clone_name }}
        mv mylammps/build/liblammps.pc lammps_artifacts_${{ inputs.clone_name }}
      
  buildPAPRECA: 

    needs: buildLAMMPS
    
    runs-on: ubuntu-latest

    steps:
      
    - name: Checkout
      uses: actions/checkout@v4 #Checkout PAPRECA repository

    - name: Clone a specific LAMMPS branch
      if: ${{ inputs.clone_type == 'branch' }}
      run: |
        git clone -b ${{ inputs.clone_name }} https://github.com/lammps/lammps.git mylammps
        cd mylammps
        git checkout ${{ inputs.clone_name }}
        git pull

    - name: Clone a specific LAMMPS tag
      if: ${{ inputs.clone_type == 'tag' }}
      run: |
        git clone --depth 1 --branch ${{ inputs.clone_name }} https://github.com/lammps/lammps.git mylammps
        
    - name: Restore LAMMPS cache
      id: cache-lammps
      uses: actions/cache@v4.0.2
      with:
        path: lammps_artifacts_${{ inputs.clone_name }}
        #Key generated from os, and commit HASH. if any of these changes the key will be invalid and a rebuild will be triggered
        key: ${{ runner.os }}-lammps-repo-key-${{ env.COMMIT_HASH }}
        restore-keys: |
          ${{ runner.os }}-lammps-repo-restorekey-${{ env.COMMIT_HASH }}
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install mpich

    - name: Build PAPRECA
      run: |
        chmod -R +rwx $GITHUB_WORKSPACE/lammps_artifacts_${{ inputs.clone_name }}/ #Grant full permissions to use LAMMPS library (sometimes artifacts do not come with full permissions)
        mkdir mypapreca; cd ./mypapreca
        mkdir build; cd build
        cmake $GITHUB_WORKSPACE/Installation/CMake -DLAMMPS_SRC_DIR=$GITHUB_WORKSPACE/mylammps/src/ -DLAMMPS_LIB_DIR=$GITHUB_WORKSPACE/lammps_artifacts_${{ inputs.clone_name }}/
        cmake --build .

    - name: Build TESTS executable for PAPRECA
      run: |
        chmod -R +rwx $GITHUB_WORKSPACE/lammps_artifacts_${{ inputs.clone_name }}/
        cd $GITHUB_WORKSPACE/tests/source\ tests/
        mkdir build; cd build
        cmake .. -DLAMMPS_SRC_DIR=$GITHUB_WORKSPACE/mylammps/src/ -DLAMMPS_LIB_DIR=$GITHUB_WORKSPACE/lammps_artifacts_${{ inputs.clone_name }} -DPAPRECA_SRC_DIR=$GITHUB_WORKSPACE/source
        cmake --build .
        
    - name: Move papreca executables to artifacts folder
      run: |
        mkdir -p papreca_artifacts_${{ inputs.clone_name }}
        mv mypapreca/build/papreca papreca_artifacts_${{ inputs.clone_name }}
        mv $GITHUB_WORKSPACE/tests/source\ tests/build/source_tests papreca_artifacts_${{ inputs.clone_name }}

    - name: Upload papreca executables as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: papreca-artifacts_${{ inputs.clone_name }}
        path: papreca_artifacts_${{ inputs.clone_name }}
